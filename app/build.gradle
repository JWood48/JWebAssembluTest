/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

buildscript {
    repositories {
        maven { url uri('https://jitpack.io') }
    }
    dependencies {
        classpath 'com.github.i-net-software:jwebassembly-gradle:master-SNAPSHOT'
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

apply plugin: 'de.inetsoftware.jwebassembly'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // Use JUnit Jupiter for testing.

    implementation 'com.github.i-net-software:jwebassembly-api:master-SNAPSHOT'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    // This dependency is used by the application.
    //implementation 'com.google.guava:guava:30.1.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'dk.jwood.jwatest.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

wasm {
  //Get more debug information if there are problems.
  //logging.level = LogLevel.DEBUG
  //logging.levelInternal = LogLevel.DEBUG

  //Change the output format to the text format *.wat. 
  //This can be helpful to understand the problems if you see the generated code as text format.
  //format = 'text'

  //The used JWebAssembly compiler version. The default is the latest release '+'. 
  //You can set any valid Gradle version string or a full dependency string. 
  //The snapshot version is recommended until a stable release.
  //compilerVersion = 0.2
  compilerVersion = 'com.github.i-net-software:jwebassembly:master-SNAPSHOT'

  //Write method and parameter names into the output *.wasm file. 
  //The file will be approximate 10% larger. And it generate a source map. 
  //With a source map you can see in the debugger of the browser your source code if available.
  debugNames = true

  //Set an absolute or relative path between the final wasm file location and the source files location.
  ///This is needed for debugging in the browser. It work only if debugNames = true.
  //sourceMapBase = '../../src/main/java/'
  //sourceMapBase = '/src/main/java/'

  //set the destination dir
  //destinationDir = file( 'targetDir' )
}
